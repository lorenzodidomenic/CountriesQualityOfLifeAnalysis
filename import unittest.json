import unittest
import pandas as pd
import numpy as np
from statsmodels.formula.api import ols
from itertools import combinations

# File: test_project.ipynb

# Load the dataset
data = pd.read_csv("./quality_of_life_indices_by_country.csv")
data.rename(columns={
    'Quality of Life Index': 'Quality_of_Life_Index',
    'Purchasing Power Index': 'Purchasing_Power_Index',
    'Safety Index': 'Safety_Index',
    'Health Care Index': 'Health_Care_Index',
    'Cost of Living Index': 'Cost_of_Living_Index',
    'Property Price to Income Ratio': 'Property_Price_to_Income_Ratio',
    'Traffic Commute Time Index': 'Traffic_Commute_Time_Index',
    'Pollution Index': 'Pollution_Index',
    'Climate Index': 'Climate_Index',
}, inplace=True)

class TestRegressionModel(unittest.TestCase):
    def setUp(self):
        # Prepare the dataset
        self.data = data
        self.independent_vars = [
            'Quality_of_Life_Index', 'Purchasing_Power_Index', 'Safety_Index',
            'Health_Care_Index', 'Cost_of_Living_Index', 'Property_Price_to_Income_Ratio',
            'Traffic_Commute_Time_Index', 'Pollution_Index'
        ]
        self.target_var = 'Rank'

    def test_r2_score(self):
        # Test if the R² score is above 0.9
        formula = f"{self.target_var} ~ {' + '.join(self.independent_vars)}"
        model = ols(formula, data=self.data).fit()
        r2 = model.rsquared
        self.assertGreaterEqual(r2, 0.9, "R² score is below 0.9.")

    def test_optimal_polynomial_terms(self):
        # Test finding the best polynomial or interaction terms
        best_r2 = 0
        best_formula = None

        # Generate combinations of variables for interaction terms
        for degree in range(1, 3):  # Linear and quadratic terms
            for combo in combinations(self.independent_vars, degree):
                formula = f"{self.target_var} ~ {' + '.join(combo)}"
                model = ols(formula, data=self.data).fit()
                if model.rsquared > best_r2:
                    best_r2 = model.rsquared
                    best_formula = formula

        print(f"Best formula: {best_formula}")
        print(f"Best R²: {best_r2}")
        self.assertGreaterEqual(best_r2, 0.9, "Optimal R² score is below 0.9.")

if __name__ == "__main__":
    unittest.main(argv=[''], exit=False)